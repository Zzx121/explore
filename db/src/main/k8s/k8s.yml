# pvc for mysql
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---

# deploy mysql
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
#  labels:
#    app: db-server
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:5.7.30
#          image: percona:ps-5.7.30
#          image: percona:ps-8
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-pass
                  key: root-pass
#            - name: MYSQL_ALLOW_EMPTY_PASSWORD
#              value: "true"
            - name: MYSQL_DATABASE
              value: test
          ports:
            - containerPort: 3306
              name: mysql
          # /var/log/mysql/ is belong to root, otherwise permission denied
#          securityContext:
#            runAsUser: 0
          livenessProbe:
             tcpSocket:
              port: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-persistent-storage
            - name: config-volume
              mountPath: /etc/mysql
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: pvc-mysql
        - name: config-volume
          configMap:
            name: mysql-config
            optional: true
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
    
---

apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  type: NodePort
  ports:
    - port: 3306
      nodePort: 30123
      name: mysql
  selector:
    app: mysql

---

# deploy db-server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: db-server
  template:
    metadata:
      labels:
        app: db-server
    spec:
      terminationGracePeriodSeconds: 0
      containers:
        - name: db-mysql
          image: deliberato/db:mysql
#          image: okteto/hello-world:java-maven
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
      # ensure mysql has started
      initContainers:
        - name: init-mysql
          image: busybox:1.28
          command: ['sh', '-c', 'until nslookup mysql; do echo waiting for mysql; sleep 2; done;']

---

# service for db server
apiVersion: v1
kind: Service
metadata:
  name: db-server
  annotations:
    dev.okteto.com/auto-ingress: "true"
  labels:
    app: db-server
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: db-server
      targetPort: 8080
  selector:
    app: db-server
    
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis-server
          image: redis:5.0.9
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 6379
              
---

apiVersion: v1
kind: Service
metadata:
  name: redis-server
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      name: redis